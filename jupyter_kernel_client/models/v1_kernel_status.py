import pprint

import six

from kubernetes.client.configuration import Configuration


class V1KernelStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "conditions": "list[V1KernelCondition]",
        "container_state": "V1ContainerState",
        "ready_replicas": "int",
    }

    attribute_map = {
        "conditions": "conditions",
        "container_state": "containerState",
        "ready_replicas": "readyReplicas",
    }

    def __init__(
        self,
        conditions=None,
        container_state=None,
        ready_replicas=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1KernelStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._conditions = None
        self._ready_replicas = None
        self._container_state = None
        self.discriminator = None

        if conditions is not None:
            self.conditions = conditions
        if ready_replicas is not None:
            self.ready_replicas = ready_replicas
        if container_state is not None:
            self._container_state = container_state

    @property
    def conditions(self):
        """Gets the conditions of this V1KernelStatus.  # noqa: E501

        Represents the latest available observations of a Kernel's current state.  # noqa: E501

        :return: The conditions of this V1KernelStatus.  # noqa: E501
        :rtype: list[V1KernelCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this V1KernelStatus.

        Represents the latest available observations of a Kernel's current state.  # noqa: E501

        :param conditions: The conditions of this V1KernelStatus.  # noqa: E501
        :type: list[V1KernelCondition]
        """

        self._conditions = conditions

    @property
    def ready_replicas(self):
        """Gets the ready_replicas of this V1KernelStatus.  # noqa: E501

        readyReplicas is the number of pods targeted by this Kernel with a Ready Condition.  # noqa: E501

        :return: The ready_replicas of this V1KernelStatus.  # noqa: E501
        :rtype: int
        """
        return self._ready_replicas

    @ready_replicas.setter
    def ready_replicas(self, ready_replicas):
        """Sets the ready_replicas of this V1KernelStatus.

        readyReplicas is the number of pods targeted by this Kernel with a Ready Condition.  # noqa: E501

        :param ready_replicas: The ready_replicas of this V1KernelStatus.  # noqa: E501
        :type: int
        """

        self._ready_replicas = ready_replicas

    @property
    def container_state(self):
        """Gets the container_state of this V1KernelStatus.  # noqa: E501

        Total number of non-terminated pods targeted by this Kernel (their labels match the selector).  # noqa: E501

        :return: The container_state of this V1KernelStatus.  # noqa: E501
        :rtype: V1ContainerState
        """
        return self._container_state

    @container_state.setter
    def container_state(self, container_state):
        """Sets the container_state of this V1KernelStatus.

        Total number of non-terminated pods targeted by this Kernel (their labels match the selector).  # noqa: E501

        :param replicas: The container_state of this V1KernelStatus.  # noqa: E501
        :type: V1ContainerState
        """

        self._container_state = container_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (
                            (item[0], item[1].to_dict())
                            if hasattr(item[1], "to_dict")
                            else item
                        ),
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1KernelStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1KernelStatus):
            return True

        return self.to_dict() != other.to_dict()
